AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a FastAPI application with PostgreSQL on AWS Fargate, ALB, S3, and Secrets Manager.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names.
    Type: String
    Default: dev

  VpcCidr:
    Description: CIDR block for the VPC.
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1Cidr:
    Description: CIDR block for Public Subnet 1.
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2Cidr:
    Description: CIDR block for Public Subnet 2.
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1Cidr:
    Description: CIDR block for Private Subnet 1.
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2Cidr:
    Description: CIDR block for Private Subnet 2.
    Type: String
    Default: 10.0.3.0/24

  DBInstanceType:
    Description: The database instance type.
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t3.micro
      - db.t3.small
      - db.t3.medium

  DBAllocatedStorage:
    Description: The size (in GiB) of the allocated storage for the DB instance.
    Type: Number
    Default: 20

  ImageUri:
    Description: ECR URI of the FastAPI Docker image (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/brand-api:latest).
    Type: String

  DomainName:
    Description: Your custom domain name (e.g., api.yourdomain.com).
    Type: String

  CertificateArn:
    Description: The ARN of an ACM SSL/TLS certificate for your domain in the same region.
    Type: String

  S3BucketName:
    Description: Name for the S3 bucket. Must be globally unique.
    Type: String
    Default: !Sub '${EnvironmentName}-fastapi-app-bucket-${AWS::AccountId}'

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-InternetGateway'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAtt VPC.AvailabilityZones ]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PublicSubnet1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAtt VPC.AvailabilityZones ]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PublicSubnet2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAtt VPC.AvailabilityZones ]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateSubnet1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAtt VPC.AvailabilityZones ]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateSubnet2'

  EIPNatGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGateway.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-NatGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PublicRouteTable'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateRouteTable1'

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateRouteTable2'

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName}-ALBSecurityGroup'
      GroupDescription: Allow HTTP/HTTPS access to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-ALBSecurityGroup'

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName}-FargateSecurityGroup'
      GroupDescription: Allow inbound from ALB and outbound to RDS, S3, Secrets Manager
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-FargateSecurityGroup'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName}-RDSSecurityGroup'
      GroupDescription: Allow access to RDS from Fargate tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt FargateSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-RDSSecurityGroup'

  # S3 Bucket
  FastAPIS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-FastAPIS3Bucket'

  # Secrets Manager
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${EnvironmentName}/fastapi-db-credentials'
      Description: Database credentials for FastAPI application.
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        PasswordLength: 16
        ExcludeCharacters: '"@/\ '

  AppSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${EnvironmentName}/fastapi-app-secrets'
      Description: Application secrets for FastAPI.
      SecretString: |
        {
          "SECRET_KEY": "CHANGE_ME_IN_CONSOLE",
          "ALGORITHM": "HS256",
          "ACCESS_TOKEN_EXPIRE_MINUTES": "30",
          "DEBUG": "False",
          "ENVIRONMENT": "production"
        }

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-ECSTaskExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-ECSTaskRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt FastAPIS3Bucket.Arn
                  - !Sub '${GetAtt FastAPIS3Bucket.Arn}/*'
        - PolicyName: SecretsManagerAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource:
                  - !Ref DBSecret
                  - !Ref AppSecrets

  # RDS PostgreSQL Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${EnvironmentName}-fastapi-db'
      DBInstanceClass: !Ref DBInstanceType
      Engine: postgres
      MasterUsername: "{{resolve:secretsmanager:${DBSecret}:SecretString:username}}"
      MasterUserPassword: "{{resolve:secretsmanager:${DBSecret}:SecretString:password}}"
      AllocatedStorage: !Ref DBAllocatedStorage
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-FastAPIDB'

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DBSubnetGroup'

  # ECS Cluster, Task Definition, and Service
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${EnvironmentName}-FastAPICluster'

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${EnvironmentName}-FastAPITask'
      Cpu: '256' # 0.25 vCPU
      Memory: '512' # 0.5 GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: fastapi-app
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: AWS_S3_BUCKET_NAME
              Value: !Ref FastAPIS3Bucket
            - Name: AWS_REGION_NAME
              Value: !Ref 'AWS::Region'
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBSecret}'
            - Name: SECRET_KEY
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AppSecrets}:SECRET_KEY::'
            - Name: ALGORITHM
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AppSecrets}:ALGORITHM::'
            - Name: ACCESS_TOKEN_EXPIRE_MINUTES
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AppSecrets}:ACCESS_TOKEN_EXPIRE_MINUTES::'
            - Name: DEBUG
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AppSecrets}:DEBUG::'
            - Name: ENVIRONMENT
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AppSecrets}:ENVIRONMENT::'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: fastapi-app

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub '${EnvironmentName}-FastAPIService'
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !GetAtt FargateSecurityGroup.GroupId
      LoadBalancers:
        - ContainerName: fastapi-app
          ContainerPort: 8000
          TargetGroupArn: !Ref ALBTargetGroup

  # Application Load Balancer (ALB)
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-ALB'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health # Your health check endpoint
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-ALBTargetGroup'

  # Route 53
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DnsName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
      Comment: Alias for FastAPI application ALB
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A

  # CloudWatch Logs
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/fastapi-app-${EnvironmentName}'
      RetentionInDays: 7 # Adjust as needed

Outputs:
  VPCId:
    Description: The ID of the created VPC.
    Value: !Ref VPC
  PublicSubnet1Id:
    Description: The ID of Public Subnet 1.
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: The ID of Public Subnet 2.
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Description: The ID of Private Subnet 1.
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: The ID of Private Subnet 2.
    Value: !Ref PrivateSubnet2
  ALBDnsName:
    Description: The DNS name of the Application Load Balancer.
    Value: !GetAtt ALB.DNSName
  AppUrl:
    Description: The URL of the deployed application.
    Value: !Sub 'https://${DomainName}'
  FastAPIS3BucketName:
    Description: Name of the S3 bucket created for the FastAPI application.
    Value: !Ref FastAPIS3Bucket
  RDSEndpoint:
    Description: Endpoint address of the RDS PostgreSQL instance.
    Value: !GetAtt RDSInstance.Endpoint.Address
  RDSPort:
    Description: Port of the RDS PostgreSQL instance.
    Value: !GetAtt RDSInstance.Endpoint.Port
  DBSecretArn:
    Description: ARN of the Secrets Manager secret for DB credentials.
    Value: !Ref DBSecret
  AppSecretsArn:
    Description: ARN of the Secrets Manager secret for application secrets.
    Value: !Ref AppSecrets
  HostedZoneId:
    Description: The ID of the Route 53 Hosted Zone created.
    Value: !Ref HostedZone
  HostedZoneNameServers:
    Description: Name servers for the Route 53 Hosted Zone. Update your domain registrar with these.
    Value: !Join [', ', !GetAtt HostedZone.NameServers]